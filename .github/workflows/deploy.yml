# .github/workflows/deploy.yml
name: Deploy Next.js to VPS

on:
  push:
    branches:
      - main # Trigger deployment on push to main branch

jobs:
  build:
    name: Build Next.js App
    runs-on: ubuntu-latest # Use GitHub-hosted runner

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22' # Specify your Node.js LTS version
          cache: 'npm' # Cache npm dependencies

      - name: Install Dependencies
        run: npm ci # Use clean install

      - name: Build Application
        run: npm run build
        # Add environment variables needed ONLY at build time (NEXT_PUBLIC_*)
        # These can be set directly or read from secrets if sensitive
        env:
          NEXT_PUBLIC_POSTHOG_HOST: ${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}
          NEXT_PUBLIC_POSTHOG_KEY: ${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}
          # Add other NEXT_PUBLIC_ variables needed during build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build
          path: |
            .next
            public
            package.json
            package-lock.json
            next.config.js
            # Exclude node_modules if installing on server
            # !node_modules

  deploy:
    name: Deploy to VPS
    needs: build # Run after build job is successful
    runs-on: ubuntu-latest

    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: nextjs-build
          path: ./deploy-files # Download to a temporary directory

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT || 22 }} # Use default 22 if secret not set
          script: |
            # Navigate to deployment directory
            echo "Navigating to ${{ secrets.DEPLOY_PATH }}"
            cd ${{ secrets.DEPLOY_PATH }}

            # Create backup of previous version (optional but recommended)
            echo "Creating backup..."
            timestamp=$(date +%Y%m%d%H%M%S)
            if [ -d ".next" ]; then
              tar czf backup-$timestamp.tar.gz .next public package.json package-lock.json next.config.js .env.production.local || echo "Backup failed, continuing..."
            fi

            # Remove old files before copying new ones (use with caution!)
            # Consider using rsync for more efficient transfers instead of removing everything
            # echo "Removing old application files..."
            # rm -rf .next public package.json package-lock.json next.config.js

            # Copy new files from downloaded artifact directory
            echo "Copying new application files..."
            cp -R ~/deploy-files/.next .
            cp -R ~/deploy-files/public .
            cp ~/deploy-files/package.json .
            cp ~/deploy-files/package-lock.json .
            cp ~/deploy-files/next.config.js .

            # Create .env file from secrets
            echo "Creating .env.production.local file..."
            echo "# Auto-generated by GitHub Actions on $(date)" > .env.production.local
            echo "CONTENTFUL_ACCESS_TOKEN=${{ secrets.CONTENTFUL_ACCESS_TOKEN }}" >> .env.production.local
            echo "CONTENTFUL_SPACE_ID=${{ secrets.CONTENTFUL_SPACE_ID }}" >> .env.production.local
            echo "CONTENTFUL_URI=${{ secrets.CONTENTFUL_URI }}" >> .env.production.local
            echo "EMAIL_MAIL_RU=${{ secrets.EMAIL_MAIL_RU }}" >> .env.production.local
            echo "NEXT_PUBLIC_POSTHOG_HOST=${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}" >> .env.production.local
            echo "NEXT_PUBLIC_POSTHOG_KEY=${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}" >> .env.production.local
            echo "PASSWORD_MAIL_RU=${{ secrets.PASSWORD_MAIL_RU }}" >> .env.production.local
            echo "ROISTAT_KEY=${{ secrets.ROISTAT_KEY }}" >> .env.production.local
            chmod 600 .env.production.local
            echo ".env file created."

            # Install only production dependencies
            echo "Installing production dependencies..."
            npm ci --only=production

            # Reload application using PM2
            echo "Reloading application '${{ secrets.APP_NAME }}' with PM2..."
            sudo ${{ secrets.PM2_PATH }} reload ${{ secrets.APP_NAME }} || sudo ${{ secrets.PM2_PATH }} restart ${{ secrets.APP_NAME }}

            # Optional: Clean up old backups (e.g., keep last 5)
            echo "Cleaning up old backups..."
            ls -tp backup-*.tar.gz | grep -v '/$' | tail -n +6 | xargs -I {} rm -- {} || echo "No old backups to remove."

            echo "Deployment finished successfully!"
