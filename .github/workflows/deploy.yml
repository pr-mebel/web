# .github/workflows/deploy-via-pull.yml
name: Deploy Next.js to VPS via Git Pull

on:
  push:
    branches:
      - main # Trigger deployment on push to main branch

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest # Only need a runner to execute the SSH command

    steps:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_KEY }} # Key for the Action to connect to VPS
          port: ${{ secrets.VPS_SSH_PORT || 22 }}
          script: |
            # Navigate to deployment directory
            echo "Navigating to ${{ secrets.DEPLOY_PATH }}"
            cd ${{ secrets.DEPLOY_PATH }}

            # Ensure we are on the correct branch (optional but good practice)
            echo "Checking out main branch..."
            git checkout main
            git reset --hard origin/main # Discard local changes, match remote

            # Pull latest changes using the deploy key configured on the VPS
            echo "Pulling latest changes from GitHub..."
            git pull origin main

            # Create .env file from secrets
            echo "Creating .env.production.local file..."
            echo "# Auto-generated by GitHub Actions on $(date)" > .env.production.local
            echo "CONTENTFUL_ACCESS_TOKEN=${{ secrets.CONTENTFUL_ACCESS_TOKEN }}" >> .env.production.local
            echo "CONTENTFUL_SPACE_ID=${{ secrets.CONTENTFUL_SPACE_ID }}" >> .env.production.local
            echo "CONTENTFUL_URI=${{ secrets.CONTENTFUL_URI }}" >> .env.production.local
            echo "EMAIL_MAIL_RU=${{ secrets.EMAIL_MAIL_RU }}" >> .env.production.local
            echo "NEXT_PUBLIC_POSTHOG_HOST=${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}" >> .env.production.local
            echo "NEXT_PUBLIC_POSTHOG_KEY=${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}" >> .env.production.local
            echo "PASSWORD_MAIL_RU=${{ secrets.PASSWORD_MAIL_RU }}" >> .env.production.local
            echo "ROISTAT_KEY=${{ secrets.ROISTAT_KEY }}" >> .env.production.local
            chmod 600 .env.production.local
            echo ".env file created."

            # Install ALL dependencies (including devDependencies)
            echo "Installing dependencies..."
            # Use NVM environment if needed (adjust path if necessary)
            # source /home/web/.nvm/nvm.sh # Source NVM if not loaded by default SSH session
            npm ci # Installs based on package-lock.json

            # Build the application ON THE SERVER
            echo "Building application..."
            npm run build

            # Reload/Start application using PM2
            echo "Restarting/Starting application '${{ secrets.APP_NAME }}' with PM2..."
            # Use startOrRestart if using an ecosystem file (recommended)
            # sudo ${{ secrets.PM2_PATH }} startOrRestart ecosystem.config.js
            # OR use restart || start if not using an ecosystem file
            sudo ${{ secrets.PM2_PATH }} restart ${{ secrets.APP_NAME }} || sudo ${{ secrets.PM2_PATH }} start npm --name "${{ secrets.APP_NAME }}" -- start
            sudo ${{ secrets.PM2_PATH }} save # Save process list

            echo "Deployment finished successfully!"
