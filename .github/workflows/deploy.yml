# .github/workflows/deploy-via-pull.yml
name: Deploy Next.js to VPS via Git Pull and Build

on:
  push:
    branches:
      - main # Trigger deployment on push to main branch

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest # Only need a runner to execute the SSH command

    steps:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_KEY }} # Key for the Action to connect to VPS
          port: ${{ secrets.VPS_SSH_PORT || 22 }}
          script: |
            # Navigate to deployment directory
            echo "Navigating to ${{ secrets.DEPLOY_PATH }}"
            cd ${{ secrets.DEPLOY_PATH }} || exit 1 # Exit if cd fails

            # Source NVM to make node and npm available
            echo "Sourcing NVM..."
            # Adjust path if your nvm directory is different
            source $HOME/.nvm/nvm.sh || { echo "Failed to source NVM"; exit 1; }
            echo "Using Node version: $(node -v), npm version: $(npm -v)"

            # Ensure we are on the correct branch
            echo "Checking out main branch..."
            git checkout main || { echo "Failed to checkout main"; exit 1; }

            # Discard any local changes and match remote exactly
            echo "Resetting local changes..."
            git reset --hard origin/main || { echo "Failed to reset to origin/main"; exit 1; }

            # Pull latest changes using the deploy key configured on the VPS
            echo "Pulling latest changes from GitHub..."
            git pull origin main || { echo "Failed to pull from origin"; exit 1; }

            # Create .env file from secrets
            echo "Creating .env.production.local file..."
            echo "# Auto-generated by GitHub Actions on $(date)" > .env.production.local
            echo "CONTENTFUL_ACCESS_TOKEN=${{ secrets.CONTENTFUL_ACCESS_TOKEN }}" >> .env.production.local
            echo "CONTENTFUL_SPACE_ID=${{ secrets.CONTENTFUL_SPACE_ID }}" >> .env.production.local
            echo "CONTENTFUL_URI=${{ secrets.CONTENTFUL_URI }}" >> .env.production.local
            echo "EMAIL_MAIL_RU=${{ secrets.EMAIL_MAIL_RU }}" >> .env.production.local
            echo "NEXT_PUBLIC_POSTHOG_HOST=${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}" >> .env.production.local
            echo "NEXT_PUBLIC_POSTHOG_KEY=${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}" >> .env.production.local
            echo "PASSWORD_MAIL_RU=${{ secrets.PASSWORD_MAIL_RU }}" >> .env.production.local
            echo "ROISTAT_KEY=${{ secrets.ROISTAT_KEY }}" >> .env.production.local
            chmod 600 .env.production.local
            echo ".env file created."

            # Install ALL dependencies (including devDependencies)
            echo "Installing dependencies..."
            npm ci || { echo "npm ci failed"; exit 1; } # Exit if install fails

            # Build the application ON THE SERVER
            echo "Building application..."
            # Add NEXT_PUBLIC_ vars needed for build explicitly here
            # Note: They are also written to .env.production.local, which next build *might* read,
            # but exporting them ensures they are available if needed before .env is loaded.
            export NEXT_PUBLIC_POSTHOG_HOST=${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}
            export NEXT_PUBLIC_POSTHOG_KEY=${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}
            # Add other NEXT_PUBLIC_ exports if needed by build process
            npm run build || { echo "npm run build failed"; exit 1; } # Exit if build fails

            echo "Executing PM2 deployment wrapper script..."
            sudo /usr/local/bin/deploy_pm2_ecosystem.sh || { echo "PM2 wrapper script failed"; exit 1; }

            echo "Deployment finished successfully!"
